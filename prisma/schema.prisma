generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  firstName String
  lastName  String
  password  String
  email     String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  createdBy String
  updatedBy String
  Author    Author?
  Editor    Editor?
  Reviewer  Reviewer?
  roles     Role[]      @relation("UserRoles")
}

model Author {
  id            String        @id @default(uuid())
  userId        String       @unique
  affiliation   String
  expertiseArea String
  User          User         @relation(fields: [userId], references: [id])
  Manuscript    Manuscript[]
  Reply         Reply[]
  Review        Review[]
}

model Editor {
  id     String @id @default(uuid())
  userId String @unique
  User   User   @relation(fields: [userId], references: [id])
  publications Publication[]
}

model Reviewer {
  id            String        @id @default(uuid())
  userId        String       @unique
  expertiseArea String
  Manuscript    Manuscript[]
  Review        Review[]
  User          User         @relation(fields: [userId], references: [id])
}

model Manuscript {
  id                String    @id @default(uuid())
  title             String
  abstract          String
  keywords          String
  status            Status
  authorId          String
  createdAt         DateTime  @default(now())
  createdBy         String
  suggestedReviewer String?
  updatedAt         DateTime  @updatedAt
  updatedBy         String
  manuscriptLink    String
  proofofPayment    String
  isPublished       Boolean
  reviewerId        String?
  Author            Author    @relation(fields: [authorId], references: [id])
  Reviewer          Reviewer? @relation(fields: [reviewerId], references: [id])
  Review            Review[]
  publicationId String? 
  publication       Publication? @relation(fields: [publicationId], references: [id])


}

model Review {
  id             String          @id @default(uuid())
  manuscriptId   String
  reviewerId     String
  reviewDate     DateTime
  comments       String
  recommendation Recommendation
  authorId       String
  Reply          Reply[]
  Author         Author         @relation(fields: [authorId], references: [id])
  Manuscript     Manuscript     @relation(fields: [manuscriptId], references: [id])
  Reviewer       Reviewer       @relation(fields: [reviewerId], references: [id])
}

model Reply {
  id          String   @id @default(uuid())
  reviewId    String
  authorId    String
  subject     String
  contents    String
  uploadFiles String?
  createdAt   DateTime @default(now())
  Author      Author   @relation(fields: [authorId], references: [id])
  Review      Review   @relation(fields: [reviewId], references: [id])
}

model Publication{
  id          String   @id @default(uuid())
  title       String
  abstract    String
  keywords    String
  editorId  String?
  editor    Editor?  @relation(fields: [editorId], references: [id])
  manuscripts  Manuscript[]

}

model Permission {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  permissionName String  @unique
  isActive       Boolean @default(true)
  createdBy      String
  updatedBy      String
  role           Role[]  @relation("RolePermissions")
}

model Role {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  roleName    String       @unique
  description String?
  isActive    Boolean      @default(true)

  user        User[]       @relation("UserRoles")
  permissions Permission[] @relation("RolePermissions")
  createdBy   String
  updatedBy   String

  @@map("roles")
}

enum Recommendation {
  ACCEPT
  MINOR_REVISIONS
  MAJOR_REVISIONS
  REJECT
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Status {
  SUBMITTED
  UNDER_REVIEW
  ACCEPTED
  REJECTED
  PUBLISHED
}
